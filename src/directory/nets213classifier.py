# -*- coding: utf-8 -*-
"""NETS213Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vsOnSuq7b2P5PzNQyTS2EEiUlufgqepn

#Classifier for Articles

Need to make final output csv to feed into the model, then need time to finalize model. Prototype is given below.
"""

from google.colab import drive
drive.mount('/content/drive')

import cufflinks as cf
cf.go_offline()
cf.set_config_file(offline=False, world_readable=True)

df = pd.read_csv('output_articles.csv')

#read in raw data from file and return a list of (label, article) tuples
def get_data(filename): 
	data = [line.strip().split('\t') for line in open(filename).readlines()]
	random.shuffle(data)
	return data

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

df = pd.read_csv("outputNETS213FINAL.csv")
nX = df["ARTICLE"]
ny = df["LABEL"]
headers = []
labels = []
for i in nX:
  headers.append(i)

for i in ny:
  labels.append(i)

X = np.array(headers)
y = np.array(labels)

import matplotlib.pyplot as plt
fig = plt.figure(figsize=(8,6))
df.groupby('Labels').Headers.count().plot.bar(ylim=0)
plt.show()

from sklearn.feature_selection import chi2
import numpy as np

category_id_df = df[['Headers', 'Labels']].drop_duplicates().sort_values('Labels')
category_to_id = dict(category_id_df.values)
id_to_category = dict(category_id_df[['Labels', 'Headers']].values)
df.head()

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, norm='l2', encoding='latin-1', ngram_range=(1, 2), stop_words='english')
features = tfidf.fit_transform(df.Headers).toarray()
labels = df.Labels

from sklearn.feature_selection import chi2
import numpy as np
N = 2
for Product, category_id in sorted(category_to_id.items()):
  features_chi2 = chi2(features, labels == category_id)
  indices = np.argsort(features_chi2[0])
  feature_names = np.array(tfidf.get_feature_names())[indices]
  unigrams = [v for v in feature_names if len(v.split(' ')) == 1]
  bigrams = [v for v in feature_names if len(v.split(' ')) == 2]
  print("# '{}':".format(Product))
  print("  . Most correlated unigrams:\n. {}".format('\n. '.join(unigrams[-N:])))
  print("  . Most correlated bigrams:\n. {}".format('\n. '.join(bigrams[-N:])))

from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.model_selection import cross_val_score
from sklearn.svm import SVC
models = [
    RandomForestClassifier(n_estimators=200, random_state=0),
    LinearSVC(),
    MultinomialNB(),
    LogisticRegression(random_state=0),
    SVC(C=1.0, kernel='linear', degree=3, gamma='auto'),
]
CV = 5
cv_df = pd.DataFrame(index=range(CV * len(models)))
entries = []
for model in models:
  model_name = model.__class__.__name__
  accuracies = cross_val_score(model, features, labels, scoring='accuracy', cv=CV)
  for fold_idx, accuracy in enumerate(accuracies):
    entries.append((model_name, fold_idx, accuracy))
cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])
import seaborn as sns
sns.boxplot(x='model_name', y='accuracy', data=cv_df)
sns.stripplot(x='model_name', y='accuracy', data=cv_df, 
              size=8, jitter=True, edgecolor="gray", linewidth=2)
plt.show()